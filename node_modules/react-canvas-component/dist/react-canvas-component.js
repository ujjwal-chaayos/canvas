'use strict';

function _interopDefault(ex) {
  return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex;
}

var React = require('react');
var React__default = _interopDefault(React);

function _objectWithoutProperties(obj, keys) {
  var target = {};
  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }
  return target;
}

class ReactCanvasComponent extends React.Component {
  getChildContext() {
    const {context, props, canvasElement} = this;
    const ctx = context && context.ctx || canvasElement && canvasElement.getContext('2d');
    const realtime = context && context.realtime || props.realtime;
    return {
      ctx,
      realtime
    };
  }
  constructor(props) {
    super(props);
    this.refDOM = this.refDOM.bind(this);
    this.requestAnimationFrameCallback = this.requestAnimationFrameCallback.bind(this);
  }
  componentDidMount() {
    this.forceUpdate();
    requestAnimationFrame(this.requestAnimationFrameCallback);
  }
  refDOM(element) {
    this.canvasElement = element;
  }
  render() {
    const {props, context} = this;
    const {draw, realtime, top, left} = props,
      other = _objectWithoutProperties(props, ['draw', 'realtime', 'top', 'left']);
    requestAnimationFrame(this.requestAnimationFrameCallback);
    if (context.ctx) {
      return React__default.createElement('div', Object.assign({
        key: "canvas"
      }, other), [props.children]);
    }
    return React__default.createElement('canvas', Object.assign({
      ref: this.refDOM,
      key: "canvas"
    }, other), [props.children]);
  }
  requestAnimationFrameCallback(time) {
    if (this.previousFrameTime !== time) {
      const {props, context, canvasElement} = this;
      const {draw, top, left} = props;
      const ctx = context && context.ctx || canvasElement && canvasElement.getContext('2d');
      const realtime = context && context.realtime || props.realtime;
      let delta = 0;
      if (!draw || !ctx) {
        return;
      }
      if (realtime) {
        requestAnimationFrame(this.requestAnimationFrameCallback);
        if (this.previousFrameTime) {
          delta = time - this.previousFrameTime;
        } else {
          this.previousFrameTime = time;
        }
        this.previousFrameTime = time;
      }
      if (top || left) {
        ctx.translate(left, top);
      }
      draw({
        time,
        delta,
        ctx
      });
      if (top || left) {
        ctx.translate(-1 * left, -1 * top);
      }
    }
  }
}

ReactCanvasComponent.defaultProps = {
  draw() {},
  realtime: false,
  top: 0,
  left: 0
};
ReactCanvasComponent.propTypes = {
  draw: React.PropTypes.func,
  realtime: React.PropTypes.bool,
  top: React.PropTypes.number,
  left: React.PropTypes.number
};
ReactCanvasComponent.contextTypes = {
  ctx: React.PropTypes.object,
  realtime: React.PropTypes.bool
};
ReactCanvasComponent.childContextTypes = {
  ctx: React.PropTypes.object,
  realtime: React.PropTypes.bool
};

module.exports = ReactCanvasComponent;
